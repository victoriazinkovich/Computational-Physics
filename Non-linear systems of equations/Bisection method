using LinearAlgebra, Plots

function bisection(f, x₁, x₂; xtol=eps(), ftol=eps())
    if x₁ > x₂; x₁, x₂ = x₂, x₁; end
    y₁, y₂ = f(x₁), f(x₂)

    sign(y₁) == sign(y₂) && error("Функция должна иметь разные знаки в концах отрезка")
    abs(y₁) < ftol && return x₁
    abs(y₂) < ftol && return x₂
    
    maxiter = ceil(Int, log2((x₂-x₁)/xtol))
    
    for i in 1:maxiter
        xnew = (x₂ + x₁) / 2
        ynew = f(xnew)
        
        if sign(y₂) == sign(ynew)
            x₂, y₂ = xnew, ynew
        elseif sign(y₁) == sign(ynew)
            x₁, y₁ = xnew, ynew
        else
            return xnew
        end
        abs(ynew) < ftol && return xnew
    end
    return (x₂ + x₁)/2
end

function rachford_rice_solve(z::AbstractArray, K::AbstractArray, bool::Real)
    a = 1 / (1 - maximum(K))
    b = 1 / (1 - minimum(K))
    
    F(G) = sum(z .* (K .- 1) ./ (G * (K .- 1) .+ 1))
    
    x = bisection(F, a, b; xtol=1e-6)
    
    bool && display(plot_graph(F, [0, 1], x))
    return x
end

function plot_graph(foo, ts, x)
    xs = range(first(ts), last(ts); length=200)
    plot(xs, foo.(xs); label="F(G)")
    scatter!([x], foo.([x]); label="Solution, G")
end


z = [0.9, 0.1]
K = [1.5, 0.01]

G₁ = rachford_rice_solve(z, K, true)
@show G₁

z = [0.2463, 0.2208, 0.2208, 0.3121]
K = [40, 25, 0.6, 0.005] 

G₂ = rachford_rice_solve(z, K, true)
@show G₂
